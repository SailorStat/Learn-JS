//? Событийный цикл
// JS работает по принципу Событийного цикла:
//  Если есть задачи, то делать с самой старой
//  Если задачь нет, то ничего не делать и ждать задачи

// Очередь задач называют очередью микрозадач

// Изменения в DOM происходят только после выполнения скрипта
// Если скрипт выполняется слишком долго, то браузер ждёт выполнения.
//   Иногда браузер может предложить прекратить выполнять слишком долгую задачу


//* Пример 1: Разбиение тяжёлой задачи
// Если задача состоит из большого количества операций, то лучше разделить их на простые
// с setTimeout(func, 0)
// В таком случае браузер не подвиснет, но будет выполнять задачу дольше


//* Пример 2: Индикация процесса
// Можно добавить функционал, отражающий текущее состояние


//* Пример 3: Делаем ещё что-то
main.onclick = function() {
  // ...
  // создадим наше собственное событие с данными пункта меню, по которому щёлкнули мышью
  let customEvent = new CustomEvent("menu-open", {
    bubbles: true
  })
  // сгенерировать наше событие асинхронно
  setTimeout(() => menu.dispatchEvent(customEvent));
}


//* Макрозадачи и микрозадачи
// Событийный цикл выполняется в следующем порядке:
//   Все микрозадачи
//   Макрозадача
// queueMicrotask(func) - ставит выполнение функции в очередь микрозадач
// setTimeout(func, 0) - ставит выполнение функции в очередь макрозадач


//* для очень тяжёлых задачь используется Web Workers
