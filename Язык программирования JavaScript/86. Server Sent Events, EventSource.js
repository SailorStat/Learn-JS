//? Server Sent Events, EventSource
//* Встроенный класс EventSource
// позволяет поддерживать соедиенение с сервером и получать от него события
// встроенное переподключение
// В отличие от WebSocket соединения EventSource:
//    Данные посылает только сервер
//    Данные только текст
//    Протокол HTTP


//* Получение сообщений
// const eventSource = new EventSource(url [, {options}])

// Сервер должен ответить статусом 200 и заголовком Content-Type: text/event-stream
// Дальше сервер должен отправлять сообщения в особом формате:
//    data: Сообщение 1
//
//    data: Сообщение 2
//    data: имеет 2 строки
//        пробле после : необязательно
//        сообщения разделяются двойным переносом строки \n\n
//        чтобы сообщение содержало несколько строк, нужно подряд несколько data
//            На пактике сложные сообщения кодируются в JSON, где оставляется знак \n

// для каждого сообщения генерируется событие message
// eventSource.onmessage = (event) => {
//    console.log('Новое сообщение: ' + event.data)
// }


//* Кросс-доменные запросы
// Как и fetch, EventSource поддерживает запросы на другие домены
// Сервер получит заголовок Origin и должен ответить Access-Control-Allow-Origin
// Если нужно передать авторизационные данные, то в объекте запроса должно быть withCredentail: true


//* Переподключение
// По умолчанию между подключениями задержка в несколько секунд
// Сервер может указать задержку в сообщении через   retry: 10000  - здержка в 10 секунд

// Перед новой попыткой подключения браузеру стоит ждать именно столько или дольше

// Если сервер хочет остановить переподключение, то доолжен ответить статусом 204
// Если браузер хочет разорвать соединение, то должен вызвать eventSource.close()

// Также переподключение не произойдёт, если статус ответа сервера будет не 301, 307, 200 или 204
//  или будет неверный Content-Type

// Если соединение закрыто, то переоткрыть его нельзя
// Нужно заново создать новое соедение


//* Идентификатор сообщения
// При разрыве связи ни сервер, ни клиент не знавет, какие сообщения получены/отправлены
// Чтобы првильно восстановить подключение, каждое сообщение должно содержать   id:

// Получая сообщение с id браузер:
//    установит его значение в eventSource.lastEventId
//    при переподключение отправит заголовок Last-Event-ID с этим id,
//        чтобы сервер мог переслать следующие сообщения
//todo id следует указывать после data, чтобы обноаление id произошло после получения сообщения


//* Статус подключения: readyState
// У объекта EventSource есть свойство readyState, имеющее 3 значения:
//    EventSource.CONNECTING = 0  - подключение или переподключение
//    EventSource.OPEN = 1        - подключено
//    EventSource.CLOSED = 2      - подключение закрыто


//* Типы событий
// EventSource генерирует 3 события:
//    message - получено сообщение, доступно, как event.data
//    open - содинение открыто
//    error - не удалось установить соединение, например: сервер вернул статус 900

// Сервер может указать новый тип события через   event: ....   в начале сообщения
// Его можно прослушать через addEventListener