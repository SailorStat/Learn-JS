//? Введение в браузерные события
//* События мыши
// click - клик левой кнопкой мыши или таб на сенсорном экране
// contextmenu - клик правой кнопкой мыши
// mouseover/mouseout - мышь наводится/покидает элемент
// mousedown/mouseup - нажали/отжали кнопку на элементе


//* События элементов управления
// submit - пользователь отправил форму
// focus - пользователь фокусируется на элементе, нажал <input>


//* Клавиатурные события
// keydown и keyup - пользователь нажал, отжал клавишу


//* События документа
// DOMContentLoaded - html зашружен, DOM построен и доступен


//* CSS события
// transitioned - завершена css анимация


//* Обработчики событий
// Событию можно назначить функцию, которая случится, как только произойдёт событие
// Способов несколько
// Через html-атрибут: <div onclick="alert('Привет')"></div> или <div onclick="sayHi()"></div>
// Через использование свойства: <div id="onclickable"></div>
// <script> onclickable.onclick = () => alert('Привет') </script>

//TODO на одно свойство можно записать только один обрабочик
// присвоение нового перезапишет старое совйство
// убрать обработчик можно присвоением elem.onclick = null


//* Доступ к элементу через this
// Внутри обработчика this ссылвется на текущий элемент
main.style.cursor = 'pointer'
main.onclick = function() {
  console.log(this.innerHTML)
}

//TODO при присвоении функции elem.onclick = func не нужны скобки
//TODO это чтобы не случилось замыкания
// в разметке () нужны, там вызывается функция


//* addEventListener/remove.. записывает/удаляет поведение при событии
//* может записать несколько поведений на одно событие
// addEventListener(event, func[, options])
// event - событие
// func - функция или обработчик, который отработает при вызове
// options - следующие доступные опции:
//    once: true - удалит обработчик после вызова
//    capture: true - фаза, на которой сработает обработчик
//    passive: true - никогда не вызовет preventDefault()

// elem.removeEventListener(event, func[, options]) удалит обработчик
// для удаления должны быть указаны теже объекты-аргументы


//* Объект события event
// event имеет следующие свойства:
// event.type - тип события
// event.currentTarget - обычно это this, но если объект привязан к другому объекту через bind
//    то мы получим этот объект через это свойство
// event.clientX / clientY - координаты курсора


//* Объект-обработчик: handleEvent
// если обработчик назначен на объект, то у него вызывается метод handleEvent
main.addEventListener('click', {
  handleEvent() {
    console.log('handleEvent отработал')
  }
})

// тоже самое можно сделать через присовение класса
class Menu {
  handleEvent() {
    console.log('handleEvent отработал в class Menu')
  }
}

const menu = new Menu
main.addEventListener('click', menu)


// Задача. Исчезновение текста по клику на кнопку
// hider.onclick = () => text.remove()

// Задача. 47. Скользящий мяч.html

// Задачаю 47. Раскрывающийся список.html