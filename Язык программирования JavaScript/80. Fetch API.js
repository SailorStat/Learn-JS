//? Fetch API
// Некоторые возможности используются редко, но для полноты картины вот они все
// В значения записаны те, что применяются по умолчанию, остальные в комментариях
{(async () => {
const promise = fetch(url, {
  method: "GET", // POST, PUT, DELETE, etc.
  headers: {
    // значение этого заголовка обычно ставится автоматически,
    // в зависимости от тела запроса
    "Content-Type": "text/plain;charset=UTF-8"
  },
  body: undefined, // string, FormData, Blob, BufferSource или URLSearchParams
  referrer: "about:client", // или "" для того, чтобы не послать заголовок Referer,
  // или URL с текущего источника
  referrerPolicy: "no-referrer-when-downgrade", // no-referrer, origin, same-origin...
  mode: "cors", // same-origin, no-cors
  credentials: "same-origin", // omit, include
  cache: "default", // no-store, reload, no-cache, force-cache или only-if-cached
  redirect: "follow", // manual, error
  integrity: "", // контрольная сумма, например "sha256-abcdef1234567890"
  keepalive: false, // true
  signal: undefined, // AbortController, чтобы прервать запрос
  window: window // null
})
})()}
// вот описание тех, что не были изучены ранее


//* referrer, referrerPolicy
// Они определяют, как fetch устанавливает заголовок Referrer

//* Опция referrer позволяет установать любой Referrer в пределах текущего источника или убрать его
// Чтобы не отправлять его, надо установть пустую строку:
// referrer: ''

// можно установить другой адрес, но с текущего источника:
// referrer: 'https://www.site.com/page/subpage/'

//* Опция referrerPolicy устанавливает общие правила для Referrer
// Выделяют 3 типа запроса:
//    1. Запрос на тотже источник
//    2. Запрос на другой источник
//    3. Запрос с https на http

// в отличие от referrer, referrerPolicy говорит, что делать в различных ситуациях
//    'no-referrer-when-downgrade' - значение по умолчанию. Referrer отправляется всегда, если
//        мы не отправили запрос https -> http
//    'no-referrer' - никогда не отправлять Referrer
//    'origin' - отправлять в Referrer только текущий источник, а не полный URL
//    'origin-when-cross-origin' - отправлять полный Referrer для запросов с текущего источника,
//        а для другого источника отправлять только источник
//    'same-origin' - отправлять полный Referrer для запросов с текущего источника,
//        а для других не отправлять его вообще
//    'strict-origin' - отправлять только источник, не отправлять на http -> https
//    'strict-origin-when-cross-origin' - для текущего источника отправлять Referrer,
//        для других источникоа отпралять только источник, ничего для http -> https
//    'unsafe-url' - полный Referrer для всех


//* Mode - защита от отправки на другой источник
//    cors - стоит по умолчанию, делает запросы с предзапросами
//    some-origin - запросы на другой источник запрещены
//    no-cors - разрешены только простые запросы на другой источник


//* Credentails - политика отправки куки и авторизационных данных в fetch
//    same-origin - стоит по умолчанию, не отправлять на другой источник
//    includes - отправлять всегда, при этом необходим Access-Control-Allow-Credentails


//* Cache - политика управления HTML-кэшированием
//    default - fetch будет использовать стандартные правила управления кэширования
//    no-store - полностью игнорировать кэш
//        Этот режим становится по умолчанию при заголовках If-Modified-Since, If-None-Match,
//        If-Unmodified-Since, If-Match или If-Range
//    reload - не брать результат из кэша, но сохранить ответ в кэше, если позволяют заголовки
//    no-cache - если есть кэшированный ответ - создать запрос, иначе обычный запрос
//    force-cache - использовать ответ из кэша любой давности, иначе сделать обычный запрос
//    only-if-cached - использовать ответ из кэша, даже если он устаревший
//        Если кэша нет, то выдать ошибку. Работает только с mode: 'same-origin'


//* Redirect - политика следования HTTP-редиректам, таким как 301, 302
//    follow - стоит по умолчанию, следовать HTTP-редиректам
//    error - ошибка в случае HTTP-редиректа
//    manual - не следовать HTTP-редиректу, но установить адрес редиректа на pesponse.url,
//        a response.redirected будет иметь значение true, чтобы могли перенаправиться вручную


//* Integrity - проверить ответ на соответствие контрольной сумме
// если у файла будет контрольная суммапо стандарту SHA-256 и другим
// параметр выглядит, как integraty: 'sha256-ab12fa'


//* Keepalive - true/false может ли запрос пережить страницу
// Используется для запросов до 64 кб для отправки статистических данных
// Такой запрос может быть только 1
// В ответ сервер посылает пустой ответ, чтобы соблюсти протоколы