//? LocalStorage, sessionStorage
//* sessionStorage позволяет хранить данные даже при обновлении страницы
//* localStorage позволяет хранить данные даже при закрытии страницы


//* Зачем, если есть куки?
// 1. Данные не отправляются при каждом запросе,
//    по-этому большинство браузеров позволяют хранить до 2 мб данных
// 2. Сервер не может манипулировать через HTTP-заголовки, только через JS
// 3. Разные источники не могут получить доступ к одним данным


//* Методы и свойства
// setItem(key, value) - сохранить пару ключ: значение
// getItem(key) - получить value для key
// removeItem(key) - удалить данные для key
// clear() - удалить всё
// key(index) - получить ключ на заданной позиции
// length - количество элементов в хранилище


//* Демо localStorage
// Данные localStorage не имеют срока давности и сохраняются даже при закрытии окна
// Если источник одинаковый, то вкладки одинаково имеют доступ к информации
localStorage.setItem('name', 'Sailor')
console.log(localStorage.getItem('name'))


//* Доступ, как у обычного объекта
// Можно записывать свойсва через localStorage.name = 'Sailor', но не рекомендуется
//    если сгенерированный ключ имеет имя, как у свойства, то возникнет ошибка
//    при модификации данных срабатывает событие storage, которое не происходит при записи без setItem


//* Перебор ключей
// по ним нельзя пройтись в цикле, но можно через обычный for
for (let i = 0; i < localStorage.length; i++) {
  const key = localStorage.key(i) 
  console.log(key + ': ' + localStorage.getItem(key))
}

// либо можно воспользоваться Object.keys, который отфильтрует свойства прототипа
const keys = Object.keys(localStorage)
for(let key of keys) {
  console.log(key + ': ' + localStorage.getItem(key))
}